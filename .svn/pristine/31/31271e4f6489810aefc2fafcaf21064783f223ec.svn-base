

var canvas;
var gl;
var table = [];

var numVertices  = 36;

var pointsArray = [];
var normalsArray = [];

var eye;
var at = vec3(0.001);
var up = vec3(0.0, 0.0, 1.0);
var fovy = 45.0;  // Field-of-view in Y direction angle (in degrees)
var aspect = 1.0;       // Viewport aspect ratio
var zNear = 0.5;
var zFar = 40.0;

//geometry 
var vertices = [
        vec4( -0.5, -0.5,  0.5, 1.0 ),
        vec4( -0.5,  0.5,  0.5, 1.0 ),
        vec4( 0.5,  0.5,  0.5, 1.0 ),
        vec4( 0.5, -0.5,  0.5, 1.0 ),
        vec4( -0.5, -0.5, -0.5, 1.0 ),
        vec4( -0.5,  0.5, -0.5, 1.0 ),
        vec4( 0.5,  0.5, -0.5, 1.0 ),
        vec4( 0.5, -0.5, -0.5, 1.0 )
    ];


var lightPosition = vec4( 0.0, .5, 2.0, 1.0 );
var lightAmbient = vec4(0.2, 0.2, 0.2, 1.0 );
var lightDiffuse = vec4( 1.0, 1.0, 1.0, 1.0 );
var lightSpecular = vec4( 1.0, 1.0, 1.0, 1.0 );


var ambientProductLoc,diffuseProductLoc, specularProductLoc,
shininessLoc;

var ctm;
var ctmLoc; 
var ambientColor, diffuseColor, specularColor;
var modelView, projection;
var viewerPos;
var program;

function quad(a, b, c, d) {

     var t1 = subtract(vertices[b], vertices[a]);
     var t2 = subtract(vertices[c], vertices[b]);
     var normal = cross(t1, t2);
     var normal = vec3(normal);
     normal = normalize(normal);

     pointsArray.push(vertices[a]); 
     normalsArray.push(normal); 
     pointsArray.push(vertices[b]); 
     normalsArray.push(normal); 
     pointsArray.push(vertices[c]); 
     normalsArray.push(normal);   
     pointsArray.push(vertices[a]);  
     normalsArray.push(normal); 
     pointsArray.push(vertices[c]); 
     normalsArray.push(normal); 
     pointsArray.push(vertices[d]); 
     normalsArray.push(normal);    
}


function colorCube()
{
    quad( 1, 0, 3, 2 );
    quad( 2, 3, 7, 6 );
    quad( 3, 0, 4, 7 );
    quad( 6, 5, 1, 2 );
    quad( 4, 5, 6, 7 );
    quad( 5, 4, 0, 1 );
    return 36;
}


window.onload = function init() {
    canvas = document.getElementById( "gl-canvas" );
    
    gl = WebGLUtils.setupWebGL( canvas );
    if ( !gl ) { alert( "WebGL isn't available" ); }

    gl.viewport( 0, 0, canvas.width, canvas.height );
    gl.clearColor( 0.0, 0.0, 0.0, 1.0 );
    
    gl.enable(gl.DEPTH_TEST);

    //
    //  Load shaders and initialize attribute buffers
    //
    program = initShaders( gl, "vertex-shader", "fragment-shader" );
    gl.useProgram( program );
    
    //make axes
     makeAxes();
    var size = colorCube();
    obj = object("CUBE",4,size);
    table.push(obj)

    var nBuffer = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, nBuffer );
    gl.bufferData( gl.ARRAY_BUFFER, flatten(normalsArray), gl.STATIC_DRAW );
    
    var vNormal = gl.getAttribLocation( program, "vNormal" );
    gl.vertexAttribPointer( vNormal, 3, gl.FLOAT, false, 0, 0 );
    gl.enableVertexAttribArray( vNormal );

    var vBuffer = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, vBuffer );
    gl.bufferData( gl.ARRAY_BUFFER, flatten(pointsArray), gl.STATIC_DRAW );
    
    var vPosition = gl.getAttribLocation(program, "vPosition");
    gl.vertexAttribPointer(vPosition, 4, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vPosition);

    
   
    
    // initialize pointers to shaders variables
    ambientProductLoc = gl.getUniformLocation(program, "ambientProduct");
    diffuseProductLoc = gl.getUniformLocation(program, "diffuseProduct");
    specularProductLoc = gl.getUniformLocation(program, "specularProduct");  
    shininessLoc  = gl.getUniformLocation(program,"shininess");
    ctmLoc = gl.getUniformLocation(program,"ctm");

    // set lights positions in shaders
    gl.uniform4fv(gl.getUniformLocation(program, "lightPosition"), 
        flatten(lightPosition) );

    // render the scene
    render();
}

var render = function(){
            
    gl.clear( gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    
    eye = vec3(10.0,10.0,10.0);
    modelView = lookAt( eye, at, up );
    projection = perspective(fovy,aspect,zNear,zFar);
    
    gl.uniformMatrix4fv( gl.getUniformLocation(program,
            "modelViewMatrix"), false, flatten(modelView) );
    gl.uniformMatrix4fv( gl.getUniformLocation(program,
            "projectionMatrix"), false, flatten(projection) );
    
    drawObjects();
            
}

var object = function(objType,objID,objSize){

     return {
        type: objType,
        id:objID,
        size: objSize,
        ctm : mat4(),
        materialAmbient:vec4( 1.0, 0.0, 1.0, 1.0 ),
        materialDiffuse:vec4( 1.0, 0.8, 0.0, 1.0 ),
        materialSpecular:vec4( 1.0, 0.8, 0.0, 1.0 ),
        materialShininess:100.0
     }
}

var drawObjects = function(){
    start =0;
    for (var i = 0; i < table.length; i++){

        
        var ap = mult(lightAmbient, table[i].materialAmbient);
        var dp = mult(lightDiffuse, table[i].materialDiffuse);
        var sp = mult(lightSpecular, table[i].materialSpecular);

        gl.uniform4fv(ambientProductLoc,flatten(ap) );
        gl.uniform4fv(diffuseProductLoc,flatten(dp) );
        gl.uniform4fv( specularProductLoc,flatten(sp) );

        gl.uniform1f(shininessLoc,table[i].materialShininess );
        gl.uniformMatrix4fv(ctmLoc, false, flatten(table[i].ctm) );
        //draw the object
        gl.drawArrays( gl.TRIANGLES, start, table[i].size);

        start += table[i].size;
    }
    

}

var makeAxes = function(){
    var size,axis_color;
    //Make x axis
    size = colorCube();
    axis_color = vec4(1.0,0.0,0.0,1.0);
    obj = object("CUBE",1,size);
    obj.ctm = mult(translate(2.5,0.0,0.0),scale(5,.25,.25));
    obj.materialDiffuse = axis_color;
    obj.materialSpecular = axis_color;


    table.push(obj);

    //Make y axis
    size = colorCube();
    axis_color = vec4(0.0,1.0,0.0,1.0);
    obj = object("CUBE",1,size);
    obj.ctm = mult(translate(0.0,2.5,0.0),scale(.25,5,.25));
    obj.materialDiffuse = axis_color;
    obj.materialSpecular = axis_color;
    table.push(obj);

    //Make z axis
    size = colorCube();
    axis_color = vec4(0.0,0.0,1.0,1.0);
    obj = object("CUBE",1,size);
    obj.ctm = mult(translate(0.0,0.0,2.5),scale(.25,.25,5));
    obj.materialDiffuse = axis_color;
    obj.materialSpecular = axis_color;
    table.push(obj);

}




