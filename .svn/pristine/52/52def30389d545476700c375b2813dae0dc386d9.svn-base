var ROT_AMT =5.0;
var mouseDown = false;
var lastMouseX = null;
var lastMouseY = null;

// handle mouse  down event call back: see what it is attached to in mouseEvents.js
function handleMouseDown(event) {
    mouseDown = true;
    lastMouseX = event.clientX;
    lastMouseY = event.clientY;
  }
// handle mouse  up event call back: see what it is attached to in mouseEvents.js
function handleMouseUp(event) {
    mouseDown = false;
}
// handle mouse move event call back: see what it is attached to in mouseEvents.js
function handleMouseMove(event) {
    if (!mouseDown) {
      return;
    }
    var newX = event.clientX;
    var newY = event.clientY;
    var deltaX = newX - lastMouseX;
    var deltaY = newY - lastMouseY;
    // do the track ball rotation
    trackBallRotation(deltaX,deltaY);
    // update  last_x, last_y
    lastMouseX = newX
    lastMouseY = newY;
  }

  // TODO: track ball rotation(given deltaX and deltaY)

 function trackBallRotation(deltaX,deltaY){
	 
	 //TODO:  this definitely not the trackball rotation. So we need to implement what we did in the cad project
    var rotx = rotate(-deltaX / 10, [0, 1, 0]);
    var roty = rotate(-deltaY / 10, [1, 0, 0]);
    var rot = mult(rotx,roty);
    modelView = mult(modelView,rot);
 }
 
// TODO: rotate the last piece about X-axis

//TODO:  rotate the last piece about Y-axis

//TODO: rotate  the last pience about Z-axis

// rotate camera left
function rotateCameraLeft(){
      var rot = rotate(-ROT_AMT, [0, 0, 1]);
      modelView = mult(modelView,rot);
}

//rotate camera right
function rotateCameraRight(){
      var rot = rotate(ROT_AMT, [0, 0, 1]);
      modelView = mult(modelView,rot);
}