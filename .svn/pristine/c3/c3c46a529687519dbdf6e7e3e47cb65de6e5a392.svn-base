var ROT_AMT =5.0;
var mouseDown = false;
var lastMouseX = null;
var lastMouseY = null;

//handle mouse  down event call back: see what it is attached to in mouseEvents.js
function handleMouseDown(event) {
	mouseDown = true;
	lastMouseX = event.clientX;
	lastMouseY = event.clientY;
}
//handle mouse  up event call back: see what it is attached to in mouseEvents.js
function handleMouseUp(event) {
	mouseDown = false;
}
//handle mouse move event call back: see what it is attached to in mouseEvents.js
function handleMouseMove(event) {
	if (!mouseDown) {
		return;
	}
	var newX = event.clientX;
	var newY = event.clientY;
	var deltaX = newX - lastMouseX;
	var deltaY = newY - lastMouseY;
	// do the track ball rotation
	trackBallRotation(deltaX,deltaY);
	// update  last_x, last_y
	lastMouseX = newX
	lastMouseY = newY;
}

// TODO: track ball rotation(given deltaX and deltaY)

function trackBallRotation(deltaX,deltaY){

	//TODO:  this definitely not the trackball rotation. So we need to implement what we did in the cad project
	var rotx = rotate(-deltaX / 10, [0, 1, 0]);
	var roty = rotate(-deltaY / 10, [1, 0, 0]);
	var rot = mult(rotx,roty);
	modelView = mult(modelView,rot);
}

//TODO: rotate the last piece in given angle about given axis
function rotateAboutAxis (angle, axis) {
	var tempListVec = [];
	for (var i=LAST_PIECE_START_INDEX; i<table.length;i++){
		var x = table[i].ctm[0][3];
		var y = table[i].ctm[1][3];
		var z = table[i].ctm[2][3];
		tempListVec.push(vec3(x,y,z));
	}
	
	var avgVec = avgOfVec(tempListVec);
	
	var rot = rotate(angle, axis);
	for (var i=LAST_PIECE_START_INDEX; i<table.length;i++){
		
		table[i].ctm = mult(table[i].ctm,translate(-avgVec[0], -avgVec[1], -avgVec[2]));

		table[i].ctm = mult(rot,table[i].ctm);

		table[i].ctm[0][3] += avgVec[0];
		table[i].ctm[1][3] += avgVec[1];
		table[i].ctm[2][3] += avgVec[2];
		
		table[i].pos = vec3(table[i].ctm[0][3], table[i].ctm[1][3], table[i].ctm[2][3]);
		
		table[i].ctm[0] = [1, 0, 0, table[i].pos[0]];
		table[i].ctm[1] = [0, 1, 0, table[i].pos[1]];
		table[i].ctm[2] = [0, 0, 1, table[i].pos[2]];
	}
}

function avgOfVec(vecList) {
	var sum = vec3(0,0,0);
	for (var i = 0; i < vecList.length; i++) {
		sum = add(sum,vecList[i]);
	}
	return vec3(sum[0]/vecList.length, sum[1]/vecList.length, sum[2]/vecList.length);
}

Math.median = function() {
	var ary, numA, i;
	ary = Array.prototype.slice.call(arguments);
	for (i = ary.length-1; i >= 0; i--) {if (ary[i] !== +ary[i]) ary[i] = Number.NEGATIVE_INFINITY;}
	numA = function(a, b){return (a-b);};
	ary.sort(numA);
	while (ary.length > 1 && !isFinite(ary[0])) ary.shift();
	return ary[Math.floor(ary.length/2)];
	}

function magnitude(u) {
	return Math.sqrt(Math.pow(u[0], 2) + Math.pow(u[1], 2) + Math.pow(u[2], 2));
}

//TODO:  rotate the last piece about Y-axis

//TODO: rotate  the last pience about Z-axis

//rotate camera left
function rotateCameraLeft(){
	var rot = rotate(-ROT_AMT, [0, 0, 1]);
	modelView = mult(modelView,rot);
}

//rotate camera right
function rotateCameraRight(){
	var rot = rotate(ROT_AMT, [0, 0, 1]);
	modelView = mult(modelView,rot);
}